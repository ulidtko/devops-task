
version: 2

#-- https://circleci.com/docs/2.0/writing-yaml/ --#

globals: &globals
  working_directory: /opt/CI

#-- https://circleci.com/docs/2.0/configuration-reference/ --#

jobs:
  compile-and-test:
    <<: *globals

    docker:
      - image: fpco/stack-build-small:lts-14.5

    environment:
      - STACK_ROOT: /home/stackage/.stack

    steps:
      - run:
          name: "Updating stack package index"
          command: |
            stack --no-terminal update

      - checkout

      - restore_cache:
          name: "Loading warm built deps"
          keys:
            - v2-built-deps-{{ checksum "stack.yaml.lock" }}
            - v2-built-deps-
          paths:
            - /home/stackage/.stack/snapshots
            - /opt/CI/.stack-work/install

      - run:
          name: "Compiling dependencies"
          command: |
            stack -j1 --no-terminal \
                build --test --only-dependencies

      - save_cache:
          name: "Caching built deps"
          key: v2-built-deps-{{ checksum "stack.yaml.lock" }}
          paths:
            - /home/stackage/.stack/snapshots
            - /opt/CI/.stack-work/install

      - run:
          name: "Compiling app"
          command: |
            stack -j1 --no-terminal \
                build --test --no-run-tests

      - run:
          name: "Running unit-tests"
          command: |
            stack test

      - run:
          name: "Making release binary"
          command: |
            stack install \
                  --system-ghc \
                  --local-bin-path stack-OUT

      - persist_to_workspace:
          root: .
          paths:
            - .circleci
            - stack-OUT
            - sample-data


  build-publish-release:
    <<: *globals

    docker:
      #-- Ceci n'est pas une DinD
      - image: docker:19.03-git

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /opt/CI

      - run:
          name: "Building release image"
          command: |
            docker build \
                  -f .circleci/app-release.dockerfile \
                  --build-arg CI_BRANCH=${CIRCLE_BRANCH} \
                  --tag circleci/app:just-built \
                  .

      - run:
          name: "Show known docker images"
          command: docker images

      - run:
          name: "DockerHub login"
          command: >
            echo "$DOCKERHUB_TOKEN" | docker login -u ulidtko --password-stdin docker.io

      - run:
          name: "Push image"
          command: |
            case $CIRCLE_BRANCH in
              master)
                docker tag circleci/app:just-built ulidtko/devops-api:stage.${CIRCLE_SHA1}
                docker push ulidtko/devops-api:stage.${CIRCLE_SHA1}
                ;;
              develop)
                docker tag circleci/app:just-built ulidtko/devops-api:develop.${CIRCLE_SHA1}
                docker push ulidtko/devops-api:develop.${CIRCLE_SHA1}
                ;;
            esac

      - run:
          name: "Cleanup"
          command: >
            docker logout; rm -fv ~/.docker/config.json


  push-k8s-deploy-develop:
    docker:
      - image: bitnami/kubectl:1.17
        entrypoint: /bin/bash
        user: daemon
        environment:
          - HOME: /tmp

    steps:
      - run:
          name: "kubectl setup"
          command: |
            echo "${K8S_CIRCLECI_CACRT}" | base64 -d > /tmp/cacert
            kubectl config set-credentials circleci \
                    --token="${K8S_CIRCLECI_TOKEN}"
            kubectl config set-cluster digitalocean \
                    --server=https://e478c52e-1767-4652-a345-bbda4df85474.k8s.ondigitalocean.com \
                    --certificate-authority=/tmp/cacert
            kubectl config set-context develop/digitalocean/circleci \
                    --user=circleci --namespace=app-develop --cluster=digitalocean
            kubectl config use-context develop/digitalocean/circleci
            kubectl version

      - run:
          name: "kubectl patch deployment"
          command: |
            set -x
            IFS='' read -r -d '' IMG_TAG_PATCH << EOF
              {"spec":{"template":{"spec":{"containers":[
                  {"name":"devops-task-pod",
                   "image":"docker.io/ulidtko/devops-api:develop.${CIRCLE_SHA1}"}
              ]}}}}
            EOF
            kubectl patch deployment -p "$IMG_TAG_PATCH"



#-- https://circleci.com/docs/2.0/workflows/ --#

workflows:
  version: 2

  pipeline-main:
    jobs:
      - compile-and-test

      - build-publish-release:
          requires:
            - compile-and-test

          filters:
            branches:
              only:
                - master
                - develop

      - push-k8s-deploy-develop:
          requires:
            - build-publish-release
          filters:
            branches:
              only:
                - develop
